df['prompt_type'] = pd.Categorical(df['prompt_type'], categories=['Neutral', 'Counter', 'Inclusive'], ordered=True)

plt.figure(figsize=(12, 7))
sns.violinplot(data=df, x='prompt_type', y='age', inner=None, palette='pastel')
sns.boxplot(data=df, x='prompt_type', y='age', width=0.1, showcaps=True, boxprops={'facecolor':'None'}, showfliers=False, whiskerprops={'linewidth':2})
plt.title("Age Distribution by Prompt Type")
plt.xlabel("Prompt Type")
plt.ylabel("Age")
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(df['age'].dropna(), bins=30, kde=True, color='skyblue')
plt.title("Overall Age Distribution")
plt.xlabel("Age")
plt.ylabel("Count")
plt.show()

gender_counts = df.groupby(['prompt_type', 'gender']).size().reset_index(name='count')
total_counts = df.groupby('prompt_type').size().reset_index(name='total')
gender_counts = gender_counts.merge(total_counts, on='prompt_type')
gender_counts['percent'] = 100 * gender_counts['count'] / gender_counts['total']

plt.figure(figsize=(10, 6))
sns.barplot(data=gender_counts, x='prompt_type', y='percent', hue='gender', palette='Set2')
plt.title("Gender Distribution (%) by Prompt Type")
plt.ylabel("Percentage")
plt.xlabel("Prompt Type")
plt.legend(title='Gender')
plt.show()

race_counts = df.groupby(['prompt_type', 'race']).size().reset_index(name='count')
total_counts = df.groupby('prompt_type').size().reset_index(name='total')
race_counts = race_counts.merge(total_counts, on='prompt_type')
race_counts['percent'] = 100 * race_counts['count'] / race_counts['total']

plt.figure(figsize=(12, 7))
sns.barplot(data=race_counts, x='prompt_type', y='percent', hue='race', palette='Set3')
plt.title("Race Distribution (%) by Prompt Type")
plt.ylabel("Percentage")
plt.xlabel("Prompt Type")
plt.legend(title='Race', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=0)
plt.show()

plt.figure(figsize=(8, 6))
sns.barplot(data=entropy_data, x='Prompt Type', y='Shannon Entropy', hue='Category', palette='pastel')
plt.title('Shannon Entropy (Diversity) by Prompt Type and Category')
plt.ylabel('Shannon Entropy')
plt.xlabel('Prompt Type')
plt.ylim(0, 2.5)
plt.legend(title='Category')
plt.tight_layout()
plt.show()

sns.countplot(data=df, x='platform', hue='race', ax=axs[1])
axs[1].set_title("Race Representation Across Platforms")
axs[1].set_xlabel("Platform")
axs[1].set_ylabel("Count")
axs[1].legend(title="Race", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

sns.violinplot(data=df, x='platform', y='age', inner='quartile', ax=axs[2])
axs[2].set_title("Age Distribution Across Platforms")
axs[2].set_xlabel("Platform")
axs[2].set_ylabel("Age")
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='platform', hue='race')
plt.title("Race Distribution per Platform")
plt.xlabel("Platform")
plt.ylabel("Count")
plt.legend(title='Race', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
